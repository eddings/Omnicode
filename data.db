{"labID":"test5","labDoc":{"labDesc":"","checkpoints":[]},"users":[{"userName":"test","password":"test","role":"student","checkpointStatus":{},"code":"","codeEdits":[],"console":{},"debugger":{},"notificationPaneContent":{}}],"timelineQuestions":[],"_id":"BfCyGJFnW7bwRiTw"}
{"labID":"test","labDoc":{"labDesc":"","checkpoints":[]},"users":[],"timelineQuestions":[],"_id":"C8ZZuCGWPjtqwagX"}
{"labID":"test2","labDoc":{"labDesc":"","checkpoints":[]},"users":[],"timelineQuestions":[],"_id":"VEocC7rOt3DylPZY"}
{"labID":"test3","labDoc":{"labDesc":"","checkpoints":[]},"users":[],"timelineQuestions":[],"_id":"ZkvMURU9RDKm5tKD"}
{"labID":"test7","labDoc":{"labDesc":"","checkpoints":[]},"users":[{"userName":"test","password":"test","role":"author","checkpointStatus":{},"code":"","codeEdits":[],"console":{"content":"","history":[]},"debugger":{"debugTraces":[],"handlePosition":0,"highlightedStr":""},"notificationPaneContent":{}}],"timelineQuestions":[],"_id":"k7bPwZNLgu2m3b8n"}
{"labID":"test6","labDoc":{"labDesc":"","checkpoints":[]},"users":[{"userName":"test","password":"test","role":"author","checkpointStatus":{},"code":"","codeEdits":[],"console":{"content":"","history":[]},"debugger":{"debugTraces":[],"handlePosition":0,"highlightedStr":""},"notificationPaneContent":{}}],"timelineQuestions":[],"_id":"pUWtDit3S3L1ZBAw"}
{"labID":"intro_programming","labDoc":{"labDesc":"Just when you had become an expert at string slicing, you discovered another sliceable data type:lists. However, lists are different from strings in that they are mutable. Not only can we slice a list, but we can also change its contents. The purpose of the lab is to introduce you to these new features, and demonstrate just how powerful the list type can be.<br>This lab will also give you some experience writing functions with for-loops. While lists will be on the first exam, for-loops are on the second exam, after you have had more practice with them.<br><b>Lab Materials</b>. We have created several Python files for this lab. You can download all of the labs from the Labs section of the course web page.<br><a href='http://www.cs.cornell.edu/courses/cs1110/2016fa/labs'>http://www.cs.cornell.edu/courses/cs1110/2016fa/labs</a><br><b>Getting Credit for the Lab</b>. Once again, you have a choice between getting credit through the online system or your instructor. The online lab is available at the web page<br><a href='http://www.cs.cornell.edu/courses/cs1110/2016fa/labs/lab07/'>http://www.cs.cornell.edu/courses/cs1110/2016fa/labs/lab07/</a><br>By now you should have a good idea of which version you are more comfortable with. This lab involves quite a bit of coding, so you may have trouble finishing it during lab time. Fortunately, <b>you have two weeks this time to finish the lab</b>.<br>Your instructor will record that you did it. Remember, despite the demands of the online system, labs are graded on effort, not correctness.Below are several function specifications; implement them. The stubs for these functions are in the editor. You will need to use for-loops to implement them. In addition, we have already provided you with test cases. So all you need to do is implement the functions.<br>In addition to using a for-loop, you may find the following list methods useful.<table><tr><th>Method</th><th>Result When Called</th></tr><tr><td>l.index(c)</td><td><b>Returns</b>: the first position of c in list l; error if not there</td></tr><tr><td>l.count(c)</td><td><b>Returns</b>: the number of times that c appears in the list l.</td></tr><tr><td>l.append(c)</td><td>Adds the value c to the end of the list. This method alters the list; it does not make a new list.</td></tr></table><br><p>Lists do not have a find() method like strings do. They only have index(). To check if an element is in a list, use the in operator (e.g. x in thelist).","checkpoints":[{"title":"lesser_than(thelist, value)","desc":"<br><b>Function</b> lesser_than(thelist, value) <b>should not alter</b> thelist. If you need to call a method that might alter the contents of thelist, you should make a copy of it first.","commandBlocks":[],"testCases":[],"quetsions":[]},{"title":"uniques(thelist)","desc":"<br><b>Function</b> uniques(thelist) <b>should not alter</b> thelist. If you need to call a method that might alter the contents of thelist, you should make a copy of it first.","commandBlocks":[],"testCases":[],"questions":[]},{"title":"clamp(thelist, min, max)","desc":"<br><b>Function</b> clamp(thelist,min,max), unlike the previous two functions, does alter thelist. This function is a procedure with no return value. You might want to look at test cases to see how we would test a procedure like this.</p>","commandBlocks":[],"testCases":[],"questions":[]}]},"users":[{"userName":"test","password":"test","role":"student","checkpointStatus":{},"code":"\r\ndef lesser_than(thelist,value):\r\n    \"\"\"Returns:  number of elements in thelist strictly less than value\r\n    \r\n    Example:  lesser_than([5, 9, 1, 7], 6) evaluates to 2\r\n    \r\n    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)\r\n    Precondition: thelist is a list of ints\r\n    \r\n    Parameter value:  the value to compare to the list\r\n    Precondition:  value is an int\r\n    @test: {\r\n        \"name\": \"lesser_than\",\r\n        \"case\": [{\r\n            \"input\": [[5, 9, 5, 7, 3, 10, 4], 5],\r\n            \"output\": [2]\r\n        }, {\r\n            \"input\": [[5, 9, 5, 7, 3, 10, 4], 4],\r\n            \"output\": [1]\r\n        }, {\r\n            \"input\": [[5, 9, 5, 7, 3, 10, 4], 3],\r\n            \"output\": [0]\r\n        }, {\r\n            \"input\": [[5, 9, 5, 7, 3, 10, 4], 6],\r\n            \"output\": [4]\r\n        }, {\r\n            \"input\": [[5, 9, 5, 7, 3, 10, 4], 10],\r\n            \"output\": [6]\r\n        }, {\r\n            \"input\": [[5, 9, 5, 7, 3, 10, 4], 20],\r\n            \"output\": [7]\r\n        }]\r\n    }    \r\n    \"\"\"\r\n    pass # Implement me\r\n'''\r\n\r\n'''\r\n\r\ndef uniques(thelist):\r\n    \"\"\"Returns: The number of unique elements in the list. \r\n    \r\n    Example: unique([5, 9, 5, 7]) evaluates to 3\r\n    Example: unique([5, 5, 1, 'a', 5, 'a']) evaluates to 3\r\n    \r\n    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)\r\n    Precondition: thelist is a list.\"\"\"\r\n    pass # Implement me\r\n'''\r\n    @test: {\r\n        \"name\": \"uniques\",\r\n        \"case\": [{\r\n            \"input\": [[5, 9, 5, 7]],\r\n            \"output\": [3]\r\n        }, {\r\n            \"input\": [[5, 5, 1, \"a\", 5, \"a\"]],\r\n            \"output\": [3]\r\n        }, {\r\n            \"input\": [[1, 2, 3, 4, 5]],\r\n            \"output\": [5]\r\n        }, {\r\n            \"input\": [[]],\r\n            \"output\": [0]\r\n        }]\r\n    }\r\n'''\r\n\r\ndef clamp(thelist,min,max):\r\n    \"\"\"Modifies the list so that every element is between min and max.\r\n    \r\n    Any number in the list less than min is replaced with min.  Any number\r\n    in the list greater than max is replaced with max. Any number between\r\n    min and max is left unchanged.\r\n    \r\n    This is a PROCEDURE. It modified thelist, but does not return a new list.\r\n    \r\n    Example: if thelist is [-1, 1, 3, 5], then clamp(thelist,0,4) changes\r\n    thelist to have [0,1,3,4] as its contents.\r\n    \r\n    Parameter thelist: the list to modify\r\n    Precondition: thelist is a list of numbers (float or int)\r\n    \r\n    Parameter min: the minimum value for the list\r\n    Precondition: min <= max is a number\r\n    \r\n    Parameter max: the maximum value for the list\r\n    Precondition: max >= min is a number\"\"\"\r\n    pass # Implement me\r\n'''\r\n    @test: {\r\n        \"name\": \"clamp\",\r\n        \"case\": [{\r\n            \"input\": [[-1, 1, 3, 5], 0, 4],\r\n            \"output\": [[0,1,3,4]]\r\n        }, {\r\n            \"input\": [[1, 3], 0, 4],\r\n            \"output\": [[1,3]]       \r\n        }, {\r\n            \"input\": [[-1, 1, 3, 5], 1, 1],\r\n            \"output\": [[1, 1, 1, 1]]\r\n        }, {\r\n            \"input\": [[], 0, 4],\r\n            \"output\": [[]]\r\n        }]\r\n    }\r\n'''","codeEdits":[{"t":1484336709419,"d":"+%0D%0Adef lesser_than(thelist,value):%0D%0A    %22%22%22Returns:  number of elements in thelist strictly less than value%0D%0A    %0D%0A    Example:  lesser_than(%5B5, 9, 1, 7%5D, 6) evaluates to 2%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list of ints%0D%0A    %0D%0A    Parameter value:  the value to compare to the list%0D%0A    Precondition:  value is an int%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22lesser_than%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 5%5D,%0D%0A            %22output%22: %5B2%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 4%5D,%0D%0A            %22output%22: %5B1%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 3%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 6%5D,%0D%0A            %22output%22: %5B4%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 10%5D,%0D%0A            %22output%22: %5B6%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 20%5D,%0D%0A            %22output%22: %5B7%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef uniques(thelist):%0D%0A    %22%22%22Returns: The number of unique elements in the list. %0D%0A    %0D%0A    Example: unique(%5B5, 9, 5, 7%5D) evaluates to 3%0D%0A    Example: unique(%5B5, 5, 1, 'a', 5, 'a'%5D) evaluates to 3%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list.%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22uniques%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 5, 1, %22a%22, 5, %22a%22%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 2, 3, 4, 5%5D%5D,%0D%0A            %22output%22: %5B5%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef clamp(thelist,min,max):%0D%0A    %22%22%22Modifies the list so that every element is between min and max.%0D%0A    %0D%0A    Any number in the list less than min is replaced with min.  Any number%0D%0A    in the list greater than max is replaced with max. Any number between%0D%0A    min and max is left unchanged.%0D%0A    %0D%0A    This is a PROCEDURE. It modified thelist, but does not return a new list.%0D%0A    %0D%0A    Example: if thelist is %5B-1, 1, 3, 5%5D, then clamp(thelist,0,4) changes%0D%0A    thelist to have %5B0,1,3,4%5D as its contents.%0D%0A    %0D%0A    Parameter thelist: the list to modify%0D%0A    Precondition: thelist is a list of numbers (float or int)%0D%0A    %0D%0A    Parameter min: the minimum value for the list%0D%0A    Precondition: min %3C= max is a number%0D%0A    %0D%0A    Parameter max: the maximum value for the list%0D%0A    Precondition: max %3E= min is a number%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22clamp%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B0,1,3,4%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 3%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B1,3%5D%5D       %0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 1, 1%5D,%0D%0A            %22output%22: %5B%5B1, 1, 1, 1%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B%5D%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''"},{"t":1484336796831,"d":"+%0D%0Adef lesser_than(thelist,value):%0D%0A    %22%22%22Returns:  number of elements in thelist strictly less than value%0D%0A    %0D%0A    Example:  lesser_than(%5B5, 9, 1, 7%5D, 6) evaluates to 2%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list of ints%0D%0A    %0D%0A    Parameter value:  the value to compare to the list%0D%0A    Precondition:  value is an int%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22lesser_than%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 5%5D,%0D%0A            %22output%22: %5B2%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 4%5D,%0D%0A            %22output%22: %5B1%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 3%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 6%5D,%0D%0A            %22output%22: %5B4%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 10%5D,%0D%0A            %22output%22: %5B6%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 20%5D,%0D%0A            %22output%22: %5B7%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef uniques(thelist):%0D%0A    %22%22%22Returns: The number of unique elements in the list. %0D%0A    %0D%0A    Example: unique(%5B5, 9, 5, 7%5D) evaluates to 3%0D%0A    Example: unique(%5B5, 5, 1, 'a', 5, 'a'%5D) evaluates to 3%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list.%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22uniques%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 5, 1, %22a%22, 5, %22a%22%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 2, 3, 4, 5%5D%5D,%0D%0A            %22output%22: %5B5%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef clamp(thelist,min,max):%0D%0A    %22%22%22Modifies the list so that every element is between min and max.%0D%0A    %0D%0A    Any number in the list less than min is replaced with min.  Any number%0D%0A    in the list greater than max is replaced with max. Any number between%0D%0A    min and max is left unchanged.%0D%0A    %0D%0A    This is a PROCEDURE. It modified thelist, but does not return a new list.%0D%0A    %0D%0A    Example: if thelist is %5B-1, 1, 3, 5%5D, then clamp(thelist,0,4) changes%0D%0A    thelist to have %5B0,1,3,4%5D as its contents.%0D%0A    %0D%0A    Parameter thelist: the list to modify%0D%0A    Precondition: thelist is a list of numbers (float or int)%0D%0A    %0D%0A    Parameter min: the minimum value for the list%0D%0A    Precondition: min %3C= max is a number%0D%0A    %0D%0A    Parameter max: the maximum value for the list%0D%0A    Precondition: max %3E= min is a number%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22clamp%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B0,1,3,4%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 3%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B1,3%5D%5D       %0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 1, 1%5D,%0D%0A            %22output%22: %5B%5B1, 1, 1, 1%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B%5D%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''"},{"t":1484336901312,"d":"+%0D%0Adef lesser_than(thelist,value):%0D%0A    %22%22%22Returns:  number of elements in thelist strictly less than value%0D%0A    %0D%0A    Example:  lesser_than(%5B5, 9, 1, 7%5D, 6) evaluates to 2%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list of ints%0D%0A    %0D%0A    Parameter value:  the value to compare to the list%0D%0A    Precondition:  value is an int%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22lesser_than%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 5%5D,%0D%0A            %22output%22: %5B2%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 4%5D,%0D%0A            %22output%22: %5B1%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 3%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 6%5D,%0D%0A            %22output%22: %5B4%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 10%5D,%0D%0A            %22output%22: %5B6%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 20%5D,%0D%0A            %22output%22: %5B7%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef uniques(thelist):%0D%0A    %22%22%22Returns: The number of unique elements in the list. %0D%0A    %0D%0A    Example: unique(%5B5, 9, 5, 7%5D) evaluates to 3%0D%0A    Example: unique(%5B5, 5, 1, 'a', 5, 'a'%5D) evaluates to 3%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list.%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22uniques%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 5, 1, %22a%22, 5, %22a%22%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 2, 3, 4, 5%5D%5D,%0D%0A            %22output%22: %5B5%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef clamp(thelist,min,max):%0D%0A    %22%22%22Modifies the list so that every element is between min and max.%0D%0A    %0D%0A    Any number in the list less than min is replaced with min.  Any number%0D%0A    in the list greater than max is replaced with max. Any number between%0D%0A    min and max is left unchanged.%0D%0A    %0D%0A    This is a PROCEDURE. It modified thelist, but does not return a new list.%0D%0A    %0D%0A    Example: if thelist is %5B-1, 1, 3, 5%5D, then clamp(thelist,0,4) changes%0D%0A    thelist to have %5B0,1,3,4%5D as its contents.%0D%0A    %0D%0A    Parameter thelist: the list to modify%0D%0A    Precondition: thelist is a list of numbers (float or int)%0D%0A    %0D%0A    Parameter min: the minimum value for the list%0D%0A    Precondition: min %3C= max is a number%0D%0A    %0D%0A    Parameter max: the maximum value for the list%0D%0A    Precondition: max %3E= min is a number%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22clamp%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B0,1,3,4%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 3%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B1,3%5D%5D       %0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 1, 1%5D,%0D%0A            %22output%22: %5B%5B1, 1, 1, 1%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B%5D%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''"},{"t":1484338553715,"d":"=393\t-33\t=625\t+    %0D%0A    %22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A\t=2028"},{"t":1484341290508,"d":"+%0D%0Adef lesser_than(thelist,value):%0D%0A    %22%22%22Returns:  number of elements in thelist strictly less than value%0D%0A    %0D%0A    Example:  lesser_than(%5B5, 9, 1, 7%5D, 6) evaluates to 2%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list of ints%0D%0A    %0D%0A    Parameter value:  the value to compare to the list%0D%0A    Precondition:  value is an int%0D%0A    @test: %7B%0D%0A        %22name%22: %22lesser_than%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 5%5D,%0D%0A            %22output%22: %5B2%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 4%5D,%0D%0A            %22output%22: %5B1%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 3%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 6%5D,%0D%0A            %22output%22: %5B4%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 10%5D,%0D%0A            %22output%22: %5B6%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 20%5D,%0D%0A            %22output%22: %5B7%5D%0D%0A        %7D%5D%0D%0A    %7D    %0D%0A    %22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A%0D%0A'''%0D%0A%0D%0Adef uniques(thelist):%0D%0A    %22%22%22Returns: The number of unique elements in the list. %0D%0A    %0D%0A    Example: unique(%5B5, 9, 5, 7%5D) evaluates to 3%0D%0A    Example: unique(%5B5, 5, 1, 'a', 5, 'a'%5D) evaluates to 3%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list.%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22uniques%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 5, 1, %22a%22, 5, %22a%22%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 2, 3, 4, 5%5D%5D,%0D%0A            %22output%22: %5B5%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef clamp(thelist,min,max):%0D%0A    %22%22%22Modifies the list so that every element is between min and max.%0D%0A    %0D%0A    Any number in the list less than min is replaced with min.  Any number%0D%0A    in the list greater than max is replaced with max. Any number between%0D%0A    min and max is left unchanged.%0D%0A    %0D%0A    This is a PROCEDURE. It modified thelist, but does not return a new list.%0D%0A    %0D%0A    Example: if thelist is %5B-1, 1, 3, 5%5D, then clamp(thelist,0,4) changes%0D%0A    thelist to have %5B0,1,3,4%5D as its contents.%0D%0A    %0D%0A    Parameter thelist: the list to modify%0D%0A    Precondition: thelist is a list of numbers (float or int)%0D%0A    %0D%0A    Parameter min: the minimum value for the list%0D%0A    Precondition: min %3C= max is a number%0D%0A    %0D%0A    Parameter max: the maximum value for the list%0D%0A    Precondition: max %3E= min is a number%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22clamp%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B0,1,3,4%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 3%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B1,3%5D%5D       %0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 1, 1%5D,%0D%0A            %22output%22: %5B%5B1, 1, 1, 1%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B%5D%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''"},{"t":1484425727232,"d":"+%0D%0Adef lesser_than(thelist,value):%0D%0A    %22%22%22Returns:  number of elements in thelist strictly less than value%0D%0A    %0D%0A    Example:  lesser_than(%5B5, 9, 1, 7%5D, 6) evaluates to 2%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list of ints%0D%0A    %0D%0A    Parameter value:  the value to compare to the list%0D%0A    Precondition:  value is an int%0D%0A    @test: %7B%0D%0A        %22name%22: %22lesser_than%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 5%5D,%0D%0A            %22output%22: %5B2%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 4%5D,%0D%0A            %22output%22: %5B1%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 3%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 6%5D,%0D%0A            %22output%22: %5B4%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 10%5D,%0D%0A            %22output%22: %5B6%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 20%5D,%0D%0A            %22output%22: %5B7%5D%0D%0A        %7D%5D%0D%0A    %7D    %0D%0A    %22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A%0D%0A'''%0D%0A%0D%0Adef uniques(thelist):%0D%0A    %22%22%22Returns: The number of unique elements in the list. %0D%0A    %0D%0A    Example: unique(%5B5, 9, 5, 7%5D) evaluates to 3%0D%0A    Example: unique(%5B5, 5, 1, 'a', 5, 'a'%5D) evaluates to 3%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list.%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22uniques%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 5, 1, %22a%22, 5, %22a%22%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 2, 3, 4, 5%5D%5D,%0D%0A            %22output%22: %5B5%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef clamp(thelist,min,max):%0D%0A    %22%22%22Modifies the list so that every element is between min and max.%0D%0A    %0D%0A    Any number in the list less than min is replaced with min.  Any number%0D%0A    in the list greater than max is replaced with max. Any number between%0D%0A    min and max is left unchanged.%0D%0A    %0D%0A    This is a PROCEDURE. It modified thelist, but does not return a new list.%0D%0A    %0D%0A    Example: if thelist is %5B-1, 1, 3, 5%5D, then clamp(thelist,0,4) changes%0D%0A    thelist to have %5B0,1,3,4%5D as its contents.%0D%0A    %0D%0A    Parameter thelist: the list to modify%0D%0A    Precondition: thelist is a list of numbers (float or int)%0D%0A    %0D%0A    Parameter min: the minimum value for the list%0D%0A    Precondition: min %3C= max is a number%0D%0A    %0D%0A    Parameter max: the maximum value for the list%0D%0A    Precondition: max %3E= min is a number%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22clamp%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B0,1,3,4%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 3%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B1,3%5D%5D       %0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 1, 1%5D,%0D%0A            %22output%22: %5B%5B1, 1, 1, 1%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B%5D%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''"},{"t":1484596437487,"d":"+%0D%0Adef lesser_than(thelist,value):%0D%0A    %22%22%22Returns:  number of elements in thelist strictly less than value%0D%0A    %0D%0A    Example:  lesser_than(%5B5, 9, 1, 7%5D, 6) evaluates to 2%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list of ints%0D%0A    %0D%0A    Parameter value:  the value to compare to the list%0D%0A    Precondition:  value is an int%0D%0A    @test: %7B%0D%0A        %22name%22: %22lesser_than%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 5%5D,%0D%0A            %22output%22: %5B2%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 4%5D,%0D%0A            %22output%22: %5B1%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 3%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 6%5D,%0D%0A            %22output%22: %5B4%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 10%5D,%0D%0A            %22output%22: %5B6%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 20%5D,%0D%0A            %22output%22: %5B7%5D%0D%0A        %7D%5D%0D%0A    %7D    %0D%0A    %22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A%0D%0A'''%0D%0A%0D%0Adef uniques(thelist):%0D%0A    %22%22%22Returns: The number of unique elements in the list. %0D%0A    %0D%0A    Example: unique(%5B5, 9, 5, 7%5D) evaluates to 3%0D%0A    Example: unique(%5B5, 5, 1, 'a', 5, 'a'%5D) evaluates to 3%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list.%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22uniques%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 5, 1, %22a%22, 5, %22a%22%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 2, 3, 4, 5%5D%5D,%0D%0A            %22output%22: %5B5%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef clamp(thelist,min,max):%0D%0A    %22%22%22Modifies the list so that every element is between min and max.%0D%0A    %0D%0A    Any number in the list less than min is replaced with min.  Any number%0D%0A    in the list greater than max is replaced with max. Any number between%0D%0A    min and max is left unchanged.%0D%0A    %0D%0A    This is a PROCEDURE. It modified thelist, but does not return a new list.%0D%0A    %0D%0A    Example: if thelist is %5B-1, 1, 3, 5%5D, then clamp(thelist,0,4) changes%0D%0A    thelist to have %5B0,1,3,4%5D as its contents.%0D%0A    %0D%0A    Parameter thelist: the list to modify%0D%0A    Precondition: thelist is a list of numbers (float or int)%0D%0A    %0D%0A    Parameter min: the minimum value for the list%0D%0A    Precondition: min %3C= max is a number%0D%0A    %0D%0A    Parameter max: the maximum value for the list%0D%0A    Precondition: max %3E= min is a number%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22clamp%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B0,1,3,4%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 3%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B1,3%5D%5D       %0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 1, 1%5D,%0D%0A            %22output%22: %5B%5B1, 1, 1, 1%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B%5D%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''"},{"t":1484604887261,"d":"+%0D%0Adef lesser_than(thelist,value):%0D%0A    %22%22%22Returns:  number of elements in thelist strictly less than value%0D%0A    %0D%0A    Example:  lesser_than(%5B5, 9, 1, 7%5D, 6) evaluates to 2%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list of ints%0D%0A    %0D%0A    Parameter value:  the value to compare to the list%0D%0A    Precondition:  value is an int%0D%0A    @test: %7B%0D%0A        %22name%22: %22lesser_than%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 5%5D,%0D%0A            %22output%22: %5B2%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 4%5D,%0D%0A            %22output%22: %5B1%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 3%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 6%5D,%0D%0A            %22output%22: %5B4%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 10%5D,%0D%0A            %22output%22: %5B6%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 20%5D,%0D%0A            %22output%22: %5B7%5D%0D%0A        %7D%5D%0D%0A    %7D    %0D%0A    %22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A%0D%0A'''%0D%0A%0D%0Adef uniques(thelist):%0D%0A    %22%22%22Returns: The number of unique elements in the list. %0D%0A    %0D%0A    Example: unique(%5B5, 9, 5, 7%5D) evaluates to 3%0D%0A    Example: unique(%5B5, 5, 1, 'a', 5, 'a'%5D) evaluates to 3%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list.%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22uniques%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 5, 1, %22a%22, 5, %22a%22%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 2, 3, 4, 5%5D%5D,%0D%0A            %22output%22: %5B5%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef clamp(thelist,min,max):%0D%0A    %22%22%22Modifies the list so that every element is between min and max.%0D%0A    %0D%0A    Any number in the list less than min is replaced with min.  Any number%0D%0A    in the list greater than max is replaced with max. Any number between%0D%0A    min and max is left unchanged.%0D%0A    %0D%0A    This is a PROCEDURE. It modified thelist, but does not return a new list.%0D%0A    %0D%0A    Example: if thelist is %5B-1, 1, 3, 5%5D, then clamp(thelist,0,4) changes%0D%0A    thelist to have %5B0,1,3,4%5D as its contents.%0D%0A    %0D%0A    Parameter thelist: the list to modify%0D%0A    Precondition: thelist is a list of numbers (float or int)%0D%0A    %0D%0A    Parameter min: the minimum value for the list%0D%0A    Precondition: min %3C= max is a number%0D%0A    %0D%0A    Parameter max: the maximum value for the list%0D%0A    Precondition: max %3E= min is a number%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22clamp%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B0,1,3,4%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 3%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B1,3%5D%5D       %0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 1, 1%5D,%0D%0A            %22output%22: %5B%5B1, 1, 1, 1%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B%5D%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''"},{"t":1484604948642,"d":"+%0D%0Adef lesser_than(thelist,value):%0D%0A    %22%22%22Returns:  number of elements in thelist strictly less than value%0D%0A    %0D%0A    Example:  lesser_than(%5B5, 9, 1, 7%5D, 6) evaluates to 2%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list of ints%0D%0A    %0D%0A    Parameter value:  the value to compare to the list%0D%0A    Precondition:  value is an int%0D%0A    @test: %7B%0D%0A        %22name%22: %22lesser_than%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 5%5D,%0D%0A            %22output%22: %5B2%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 4%5D,%0D%0A            %22output%22: %5B1%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 3%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 6%5D,%0D%0A            %22output%22: %5B4%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 10%5D,%0D%0A            %22output%22: %5B6%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 20%5D,%0D%0A            %22output%22: %5B7%5D%0D%0A        %7D%5D%0D%0A    %7D    %0D%0A    %22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A%0D%0A'''%0D%0A%0D%0Adef uniques(thelist):%0D%0A    %22%22%22Returns: The number of unique elements in the list. %0D%0A    %0D%0A    Example: unique(%5B5, 9, 5, 7%5D) evaluates to 3%0D%0A    Example: unique(%5B5, 5, 1, 'a', 5, 'a'%5D) evaluates to 3%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list.%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22uniques%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 5, 1, %22a%22, 5, %22a%22%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 2, 3, 4, 5%5D%5D,%0D%0A            %22output%22: %5B5%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef clamp(thelist,min,max):%0D%0A    %22%22%22Modifies the list so that every element is between min and max.%0D%0A    %0D%0A    Any number in the list less than min is replaced with min.  Any number%0D%0A    in the list greater than max is replaced with max. Any number between%0D%0A    min and max is left unchanged.%0D%0A    %0D%0A    This is a PROCEDURE. It modified thelist, but does not return a new list.%0D%0A    %0D%0A    Example: if thelist is %5B-1, 1, 3, 5%5D, then clamp(thelist,0,4) changes%0D%0A    thelist to have %5B0,1,3,4%5D as its contents.%0D%0A    %0D%0A    Parameter thelist: the list to modify%0D%0A    Precondition: thelist is a list of numbers (float or int)%0D%0A    %0D%0A    Parameter min: the minimum value for the list%0D%0A    Precondition: min %3C= max is a number%0D%0A    %0D%0A    Parameter max: the maximum value for the list%0D%0A    Precondition: max %3E= min is a number%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22clamp%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B0,1,3,4%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 3%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B1,3%5D%5D       %0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 1, 1%5D,%0D%0A            %22output%22: %5B%5B1, 1, 1, 1%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B%5D%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''"},{"t":1484605025902,"d":"+%0D%0Adef lesser_than(thelist,value):%0D%0A    %22%22%22Returns:  number of elements in thelist strictly less than value%0D%0A    %0D%0A    Example:  lesser_than(%5B5, 9, 1, 7%5D, 6) evaluates to 2%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list of ints%0D%0A    %0D%0A    Parameter value:  the value to compare to the list%0D%0A    Precondition:  value is an int%0D%0A    @test: %7B%0D%0A        %22name%22: %22lesser_than%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 5%5D,%0D%0A            %22output%22: %5B2%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 4%5D,%0D%0A            %22output%22: %5B1%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 3%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 6%5D,%0D%0A            %22output%22: %5B4%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 10%5D,%0D%0A            %22output%22: %5B6%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7, 3, 10, 4%5D, 20%5D,%0D%0A            %22output%22: %5B7%5D%0D%0A        %7D%5D%0D%0A    %7D    %0D%0A    %22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A%0D%0A'''%0D%0A%0D%0Adef uniques(thelist):%0D%0A    %22%22%22Returns: The number of unique elements in the list. %0D%0A    %0D%0A    Example: unique(%5B5, 9, 5, 7%5D) evaluates to 3%0D%0A    Example: unique(%5B5, 5, 1, 'a', 5, 'a'%5D) evaluates to 3%0D%0A    %0D%0A    Parameter thelist: the list to check (WHICH SHOULD NOT BE MODIFIED)%0D%0A    Precondition: thelist is a list.%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22uniques%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B5, 9, 5, 7%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B5, 5, 1, %22a%22, 5, %22a%22%5D%5D,%0D%0A            %22output%22: %5B3%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 2, 3, 4, 5%5D%5D,%0D%0A            %22output%22: %5B5%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D%5D,%0D%0A            %22output%22: %5B0%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''%0D%0A%0D%0Adef clamp(thelist,min,max):%0D%0A    %22%22%22Modifies the list so that every element is between min and max.%0D%0A    %0D%0A    Any number in the list less than min is replaced with min.  Any number%0D%0A    in the list greater than max is replaced with max. Any number between%0D%0A    min and max is left unchanged.%0D%0A    %0D%0A    This is a PROCEDURE. It modified thelist, but does not return a new list.%0D%0A    %0D%0A    Example: if thelist is %5B-1, 1, 3, 5%5D, then clamp(thelist,0,4) changes%0D%0A    thelist to have %5B0,1,3,4%5D as its contents.%0D%0A    %0D%0A    Parameter thelist: the list to modify%0D%0A    Precondition: thelist is a list of numbers (float or int)%0D%0A    %0D%0A    Parameter min: the minimum value for the list%0D%0A    Precondition: min %3C= max is a number%0D%0A    %0D%0A    Parameter max: the maximum value for the list%0D%0A    Precondition: max %3E= min is a number%22%22%22%0D%0A    pass # Implement me%0D%0A'''%0D%0A    @test: %7B%0D%0A        %22name%22: %22clamp%22,%0D%0A        %22case%22: %5B%7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B0,1,3,4%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B1, 3%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B1,3%5D%5D       %0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B-1, 1, 3, 5%5D, 1, 1%5D,%0D%0A            %22output%22: %5B%5B1, 1, 1, 1%5D%5D%0D%0A        %7D, %7B%0D%0A            %22input%22: %5B%5B%5D, 0, 4%5D,%0D%0A            %22output%22: %5B%5B%5D%5D%0D%0A        %7D%5D%0D%0A    %7D%0D%0A'''"}],"console":{"content":"","history":[]},"debugger":{"debugTraces":[],"handlePosition":0,"highlightedStr":""},"notificationPaneContent":{}},{"userName":"asdf","password":"asdf","role":"student","checkpointStatus":{},"codeEdits":[],"console":{"content":"","history":[]},"debugger":{"debugTraces":[],"handlePosition":0,"highlightedStr":""},"notificationPaneContent":{}}],"timelineQuestions":[{"questioner":"test","question":"How do you print text in Python?","answers":[{"answerer":"asdf","answer":"You can use 'print'. So something like 'print \"print this string\"'"}],"checkpoint":{"desc":"Write a function hello() that prints \"Hello, world!\" to the console.","testCases":[{"input":"","inputType":"null","output":"Hello, world!","outputType":"string"}],"checkpointIdx":0}}],"_id":"vS3ypI9dW5w5CJkg"}
